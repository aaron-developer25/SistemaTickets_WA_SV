@page "/editarCliente/{ClienteID:int}";

@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager


<EditForm Model="clientes" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">

        <div class="card-header bg-primary text-white text-center py-2 rounded">
            <h3 style="font-weight: bold;" class="mb-0 font-weight-bold">Editar Clientes</h3>
        </div>

        <div class="card-body">

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label style="font-weight: bold;" for="Nombres" class="form-label">Nombres:</label>
                    <InputText @bind-Value="clientes.Nombres" class="form-control" placeholder="Ingrese sus nombres" />
                    <ValidationMessage For="@(() => clientes.Nombres)" />
                </div>

                <div class="col-md-6 mb-3">
                    <label style="font-weight: bold;" for="RNC" class="form-label">RNC:</label>
                    <InputText @bind-Value="clientes.RNC" class="form-control" placeholder="Ingrese el RNC" />
                    <ValidationMessage For="@(() => clientes.RNC)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label style="font-weight: bold;" for="Telefono" class="form-label">Tel&eacute;fono:</label>
                    <InputText @bind-Value="clientes.Telefono" class="form-control" placeholder="Ingrese el Tel&eacute;fono" />
                    <ValidationMessage For="@(() => clientes.Telefono)" />
                </div>

                <div class="col-md-6 mb-3">
                    <label style="font-weight: bold;" for="Celular" class="form-label">Celular:</label>
                    <InputText @bind-Value="clientes.Celular" class="form-control" placeholder="Ingrese el Celular" />
                    <ValidationMessage For="@(() => clientes.Celular)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label style="font-weight: bold;" for="Email" class="form-label">Email:</label>
                    <InputText @bind-Value="clientes.Email" class="form-control" placeholder="Ingrese el Email" />
                    <ValidationMessage For="@(() => clientes.Email)" />
                </div>

                <div class="col-md-6 mb-3">
                    <label style="font-weight: bold;" for="Direccion" class="form-label">Direcci&oacute;n:</label>
                    <InputText @bind-Value="clientes.Direccion" class="form-control" placeholder="Ingrese la Direcci&oacute;n" />
                    <ValidationMessage For="@(() => clientes.Direccion)" />
                </div>
            </div>

        </div>

        <div class="card-footer bg-light d-flex justify-content-end">
            <div class="btn-group">
                <a type="button" href="/indexcliente/" class="btn btn-outline-danger"><span class="fas fa-arrow-left"></span> Retroceder </a>
                <button type="submit" class="btn btn-outline-success"><span class="fas fa-save"></span> Guardar </button>
            </div>
        </div>
    </div>
</EditForm>

@if (ModalMensaje)
{
    <div class="modal d-block" style="z-index: 999999; transition: transform 0.3s ease;">
        <div class="w-auto position-fixed top-50 start-50 translate-middle">
            <div class="modal-content" style="border-radius: 20px;">
                <div class="modal-body bg-@mensajeColor text-center text-white" style="border-radius: 15px;">
                    <label class="fw-bold">@mensajeTexto</label>
                </div>
            </div>
        </div>
    </div>
}


@code { 

    public Clientes clientes = new Clientes();

    [Parameter]
    public int ClienteID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ClienteID > 0)
        {
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        var clienteEncontrado = await httpClient.GetFromJsonAsync<Clientes>("api/Clientes/" + ClienteID);
        if (clienteEncontrado != null)
        {
            this.clientes = clienteEncontrado;
        }
        else
        {
            await MostrarMensaje("Cliente no encontrado", "Invalido", "clientenoencontrado.mp3");
        }
    }

    public async Task Guardar()
    {
        var modificado = await httpClient.PutAsJsonAsync("api/Clientes", this.clientes);
        if (modificado.IsSuccessStatusCode)
        {
            await MostrarMensaje("Guardado Exitoso.", "Valido", "guardadoExito.mp3");
            NavigationManager.NavigateTo("/indexcliente");
        }
        else
        {
            await MostrarMensaje("No se pudo conectar a la API!", "Invalido", "errorinesperado.mp3");
        }
    }

    string mensajeTexto = "", mensajeColor = ""; bool ModalMensaje = false;

    public async Task MostrarMensaje(string mensaje, string tipo, string audio)
    {
        mensajeTexto = mensaje;
        await JSRuntime.InvokeVoidAsync("playAudio", "recursos/audios/" + audio);

        if (tipo == "Valido")
        {
            mensajeColor = "success";
        }
        else
        {
            mensajeColor = "danger";
        }

        ModalMensaje = true;
        StateHasChanged();
        await Task.Delay(3000);
        ModalMensaje = false;
        StateHasChanged();
    }
}
